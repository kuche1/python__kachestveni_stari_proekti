import pygame
import random
import time
from colors import *



pygame.init()

FPS = 60

displayX = 1000
displayY = 600
gameDisplay = pygame.display.set_mode((displayX, displayY))

clock = pygame.time.Clock()

font = pygame.font.Font(None, 20)


blockSize = 20

startPoint = [100, 100]
endPoint = [900, 500]

itemPos = startPoint

wall = [[0, 0], [20, 0], [40, 0], [60, 0], [80, 0], [100, 0], [120, 0], [140, 0], [160, 0], [180, 0], [200, 0], [220, 0], [240, 0], [260, 0], [280, 0], [300, 0], [320, 0], [340, 0], [360, 0], [380, 0], [400, 0], [420, 0], [440, 0], [460, 0], [480, 0], [500, 0], [520, 0], [540, 0], [560, 0], [580, 0], [600, 0], [620, 0], [640, 0], [660, 0], [680, 0], [700, 0], [720, 0], [740, 0], [760, 0], [780, 0], [800, 0], [820, 0], [840, 0], [860, 0], [880, 0], [900, 0], [920, 0], [940, 0], [960, 0], [980, 0], [980, 20], [980, 40], [980, 60], [980, 80], [980, 100], [980, 120], [980, 140], [980, 160], [980, 180], [980, 220], [980, 240], [980, 260], [980, 280], [980, 300], [980, 200], [980, 320], [980, 340], [980, 380], [980, 400], [980, 420], [980, 440], [980, 460], [980, 480], [980, 500], [980, 520], [980, 540], [980, 560], [980, 580], [980, 360], [940, 580], [960, 580], [920, 580], [900, 580], [880, 580], [860, 580], [840, 580], [820, 580], [800, 580], [780, 580], [760, 580], [740, 580], [720, 580], [700, 580], [680, 580], [660, 580], [640, 580], [620, 580], [600, 580], [580, 580], [560, 580], [540, 580], [520, 580], [500, 580], [480, 580], [420, 580], [400, 580], [380, 580], [440, 580], [460, 580], [360, 580], [340, 580], [320, 580], [300, 580], [280, 580], [240, 580], [200, 580], [180, 580], [160, 580], [140, 580], [120, 580], [260, 580], [220, 580], [100, 580], [80, 580], [60, 580], [40, 580], [20, 580], [0, 580], [0, 560], [0, 540], [0, 520], [0, 500], [0, 480], [0, 460], [0, 440], [0, 420], [0, 400], [0, 380], [0, 360], [0, 340], [0, 320], [0, 300], [0, 280], [0, 260], [0, 220], [0, 200], [0, 140], [0, 120], [0, 100], [0, 80], [0, 60], [0, 40], [0, 20], [0, 160], [0, 180], [0, 240]]


explored = []
notExplored = []
notExplored.append([itemPos[0], itemPos[1], 0])
path = []
distanceToEnd = None

doingAlg = False
while True:
    cur = list(pygame.mouse.get_pos())
    cur[0] -= cur[0]%blockSize
    cur[1] -= cur[1]%blockSize

    click = pygame.mouse.get_pressed()
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                doingAlg = True
            if event.key == pygame.K_1:
                wall = [[0, 0], [20, 0], [40, 0], [60, 0], [80, 0], [100, 0], [120, 0], [140, 0], [160, 0], [180, 0], [200, 0], [220, 0], [240, 0], [260, 0], [280, 0], [300, 0], [320, 0], [340, 0], [360, 0], [380, 0], [400, 0], [420, 0], [440, 0], [460, 0], [480, 0], [500, 0], [520, 0], [540, 0], [560, 0], [580, 0], [600, 0], [620, 0], [640, 0], [660, 0], [680, 0], [700, 0], [720, 0], [740, 0], [760, 0], [780, 0], [800, 0], [820, 0], [840, 0], [860, 0], [880, 0], [900, 0], [920, 0], [940, 0], [960, 0], [980, 0], [980, 20], [980, 40], [980, 60], [980, 80], [980, 100], [980, 120], [980, 140], [980, 160], [980, 180], [980, 220], [980, 240], [980, 260], [980, 280], [980, 300], [980, 200], [980, 320], [980, 340], [980, 380], [980, 400], [980, 420], [980, 440], [980, 460], [980, 480], [980, 500], [980, 520], [980, 540], [980, 560], [980, 580], [980, 360], [940, 580], [960, 580], [920, 580], [900, 580], [880, 580], [860, 580], [840, 580], [820, 580], [800, 580], [780, 580], [760, 580], [740, 580], [720, 580], [700, 580], [680, 580], [660, 580], [640, 580], [620, 580], [600, 580], [580, 580], [560, 580], [540, 580], [520, 580], [500, 580], [480, 580], [420, 580], [400, 580], [380, 580], [440, 580], [460, 580], [360, 580], [340, 580], [320, 580], [300, 580], [280, 580], [240, 580], [200, 580], [180, 580], [160, 580], [140, 580], [120, 580], [260, 580], [220, 580], [100, 580], [80, 580], [60, 580], [40, 580], [20, 580], [0, 580], [0, 560], [0, 540], [0, 520], [0, 500], [0, 480], [0, 460], [0, 440], [0, 420], [0, 400], [0, 380], [0, 360], [0, 340], [0, 320], [0, 300], [0, 280], [0, 260], [0, 220], [0, 200], [0, 140], [0, 120], [0, 100], [0, 80], [0, 60], [0, 40], [0, 20], [0, 160], [0, 180], [0, 240]]
            if event.key == pygame.K_2:
                wall = [[0, 0], [20, 0], [40, 0], [60, 0], [80, 0], [100, 0], [120, 0], [140, 0], [160, 0], [180, 0], [200, 0], [220, 0], [240, 0], [260, 0], [280, 0], [300, 0], [320, 0], [340, 0], [360, 0], [380, 0], [400, 0], [420, 0], [440, 0], [460, 0], [480, 0], [500, 0], [520, 0], [540, 0], [560, 0], [580, 0], [600, 0], [620, 0], [640, 0], [660, 0], [680, 0], [700, 0], [720, 0], [740, 0], [760, 0], [780, 0], [800, 0], [820, 0], [840, 0], [860, 0], [880, 0], [900, 0], [920, 0], [940, 0], [960, 0], [980, 0], [980, 20], [980, 40], [980, 60], [980, 80], [980, 100], [980, 120], [980, 140], [980, 160], [980, 180], [980, 220], [980, 240], [980, 260], [980, 280], [980, 300], [980, 200], [980, 320], [980, 340], [980, 380], [980, 400], [980, 420], [980, 440], [980, 460], [980, 480], [980, 500], [980, 520], [980, 540], [980, 560], [980, 580], [980, 360], [940, 580], [960, 580], [920, 580], [900, 580], [880, 580], [860, 580], [840, 580], [820, 580], [800, 580], [780, 580], [760, 580], [740, 580], [720, 580], [700, 580], [680, 580], [660, 580], [640, 580], [620, 580], [600, 580], [580, 580], [560, 580], [540, 580], [520, 580], [500, 580], [480, 580], [420, 580], [400, 580], [380, 580], [440, 580], [460, 580], [360, 580], [340, 580], [320, 580], [300, 580], [280, 580], [240, 580], [200, 580], [180, 580], [160, 580], [140, 580], [120, 580], [260, 580], [220, 580], [100, 580], [80, 580], [60, 580], [40, 580], [20, 580], [0, 580], [0, 560], [0, 540], [0, 520], [0, 500], [0, 480], [0, 460], [0, 440], [0, 420], [0, 400], [0, 380], [0, 360], [0, 340], [0, 320], [0, 300], [0, 280], [0, 260], [0, 220], [0, 200], [0, 140], [0, 120], [0, 100], [0, 80], [0, 60], [0, 40], [0, 20], [0, 160], [0, 180], [0, 240], [900, 560], [900, 540], [960, 540], [940, 540], [900, 520], [900, 500], [920, 500], [940, 500], [960, 460], [940, 460], [920, 460], [880, 500], [880, 480], [880, 460], [880, 440], [880, 420], [900, 420], [920, 420], [940, 420], [960, 380], [940, 380], [920, 380], [900, 380], [880, 380], [860, 380], [860, 420], [840, 420], [820, 420], [820, 400], [820, 380], [820, 360], [820, 340], [840, 340], [860, 340], [880, 340], [900, 340], [920, 340], [940, 340], [960, 300], [940, 300], [920, 300], [900, 300], [880, 300], [860, 300], [840, 300], [820, 300], [800, 300], [800, 340], [780, 340], [760, 340], [760, 320], [760, 300], [760, 280], [760, 260], [840, 260], [860, 260], [940, 260], [920, 260], [900, 260], [880, 260], [820, 260], [800, 260], [780, 260], [960, 220], [940, 220], [920, 220], [900, 220], [880, 220], [860, 220], [840, 220], [820, 220], [800, 220], [780, 220], [760, 220], [740, 220], [740, 260], [720, 260], [700, 260], [700, 240], [700, 220], [700, 200], [700, 180], [720, 180], [740, 180], [760, 180], [780, 180], [800, 180], [820, 180], [840, 180], [860, 180], [880, 180], [900, 180], [920, 180], [940, 180], [960, 140], [940, 140], [920, 140], [900, 140], [880, 140], [860, 140], [840, 140], [820, 140], [800, 140], [780, 140], [740, 140], [760, 140], [720, 140], [700, 140], [680, 140], [680, 180], [660, 180], [640, 180], [640, 160], [640, 140], [640, 120], [640, 100], [660, 100], [680, 100], [700, 100], [720, 100], [740, 100], [760, 100], [780, 100], [800, 100], [820, 100], [840, 100], [860, 100], [880, 100], [900, 100], [920, 100], [940, 100], [960, 60], [940, 60], [920, 60], [900, 60], [880, 60], [860, 60], [840, 60], [820, 60], [800, 60], [780, 60], [760, 60], [740, 60], [720, 60], [700, 60], [680, 60], [660, 60], [640, 60], [620, 60], [620, 100], [600, 100], [580, 100], [580, 80], [580, 40], [580, 20], [620, 20], [660, 40], [700, 20], [740, 40], [780, 20], [820, 40], [860, 20], [900, 40], [940, 20], [540, 20], [540, 40], [540, 60], [540, 80], [540, 100], [540, 120], [540, 140], [560, 140], [580, 140], [600, 140], [600, 160], [600, 180], [600, 200], [600, 220], [620, 220], [640, 220], [660, 220], [660, 240], [660, 260], [660, 280], [660, 300], [680, 300], [700, 300], [720, 300], [720, 320], [720, 340], [720, 360], [720, 380], [740, 380], [760, 380], [780, 380], [780, 400], [780, 420], [780, 440], [780, 460], [800, 460], [820, 460], [840, 460], [840, 480], [840, 500], [840, 520], [840, 540], [860, 540], [800, 560], [800, 540], [800, 520], [800, 500], [780, 500], [760, 500], [740, 500], [720, 500], [760, 460], [740, 460], [720, 460], [700, 500], [680, 500], [680, 480], [680, 460], [680, 440], [680, 420], [700, 420], [720, 420], [740, 420], [660, 420], [660, 400], [660, 380], [660, 360], [660, 340], [700, 380], [680, 340], [620, 260], [620, 280], [620, 300], [620, 320], [620, 340], [620, 360], [620, 380], [620, 400], [620, 420], [620, 440], [620, 460], [620, 480], [620, 500], [620, 520], [620, 540], [780, 540], [760, 540], [740, 540], [720, 540], [700, 540], [680, 540], [660, 540], [640, 460], [660, 500], [20, 40], [40, 40], [60, 40], [80, 40], [100, 40], [120, 40], [140, 40], [160, 40], [160, 60], [200, 20], [200, 40], [200, 60], [200, 80], [200, 100], [160, 100], [140, 100], [120, 100], [100, 100], [80, 100], [60, 100], [40, 100], [220, 100], [240, 100], [260, 100], [280, 100], [240, 40], [240, 60], [280, 40], [280, 20], [320, 60], [320, 80], [200, 120], [200, 140], [180, 140], [160, 140], [120, 140], [100, 140], [80, 140], [60, 140], [120, 160], [120, 180], [120, 200], [120, 220], [160, 160], [160, 200], [160, 220], [20, 260], [40, 260], [60, 260], [80, 260], [100, 260], [120, 260], [140, 260], [160, 260], [180, 260], [200, 260], [200, 240], [200, 220], [200, 200], [200, 180], [160, 240], [80, 180], [60, 180], [40, 180], [20, 180], [40, 200], [40, 220], [80, 240], [80, 220], [360, 80], [360, 60], [360, 40], [360, 20], [360, 100], [320, 100], [340, 100], [380, 40], [400, 40], [420, 40], [460, 40], [480, 40], [500, 40], [460, 60], [460, 80], [460, 100], [460, 120], [460, 140], [460, 160], [520, 140], [500, 140], [500, 60], [500, 80], [500, 100], [240, 140], [260, 140], [280, 140], [300, 140], [320, 140], [340, 140], [360, 140], [380, 140], [400, 140], [420, 140], [400, 80], [400, 100], [400, 120], [440, 80], [440, 100], [240, 180], [240, 200], [240, 220], [240, 240], [240, 260], [240, 280], [240, 300], [240, 320], [240, 340], [280, 200], [300, 200], [320, 200], [340, 200], [360, 200], [380, 200], [400, 200], [420, 200], [440, 200], [460, 200], [480, 200], [500, 200], [520, 200], [540, 200], [560, 200], [600, 280], [580, 280], [560, 280], [520, 280], [500, 280], [480, 280], [560, 300], [560, 320], [560, 340], [560, 360], [560, 380], [560, 400], [560, 420], [560, 440], [560, 460], [560, 480], [400, 420], [380, 420], [360, 420], [340, 420], [320, 420], [300, 420], [280, 420], [260, 420], [240, 420], [220, 420], [200, 420], [180, 420], [160, 420], [140, 420], [120, 420], [100, 420], [80, 540], [80, 520], [80, 500], [80, 480], [80, 460], [80, 440], [80, 420], [20, 540], [40, 540], [60, 500], [40, 500], [20, 460], [40, 460], [60, 420], [40, 420], [20, 380], [40, 380], [60, 380], [80, 380], [120, 400], [120, 380], [120, 360], [120, 340], [100, 340], [80, 340], [60, 340], [40, 340], [40, 300], [60, 300], [80, 300], [100, 300], [120, 300], [140, 300], [160, 300], [180, 300], [180, 280], [160, 320], [160, 340], [160, 360], [160, 380], [80, 560], [120, 440], [100, 480], [120, 480], [140, 480], [160, 480], [160, 460], [200, 440], [200, 460], [200, 480], [200, 500], [120, 540], [140, 540], [240, 520], [240, 540], [160, 540], [180, 540], [200, 540], [220, 540], [240, 500], [240, 480], [240, 460], [240, 440], [280, 460], [280, 480], [280, 500], [280, 520], [280, 540], [280, 560], [140, 500], [100, 500], [200, 340], [200, 360], [200, 380], [200, 400], [280, 400], [280, 380], [280, 360], [280, 340], [280, 320], [280, 300], [300, 300], [320, 300], [340, 300], [360, 300], [380, 300], [400, 300], [420, 300], [360, 320], [360, 340], [360, 360], [360, 380], [340, 340], [320, 340], [300, 380], [320, 380], [400, 400], [400, 380], [400, 360], [400, 340], [560, 220], [560, 260], [560, 240], [600, 540], [580, 540], [560, 540], [540, 540], [520, 540], [500, 540], [480, 540], [460, 540], [540, 520], [460, 520], [460, 500], [460, 480], [460, 460], [460, 440], [460, 420], [460, 400], [460, 380], [460, 360], [460, 340], [440, 340], [420, 340], [420, 420], [320, 440], [320, 460], [320, 480], [320, 500], [320, 520], [320, 540], [340, 500], [360, 500], [380, 500], [400, 500], [420, 500], [420, 440], [420, 460], [400, 460], [380, 460], [360, 460], [360, 560], [360, 540], [400, 520], [400, 540], [420, 520], [260, 240], [280, 240], [340, 240], [360, 240], [300, 240], [320, 240], [380, 240], [400, 240], [420, 240], [440, 240], [460, 240], [480, 240], [500, 240], [520, 240], [420, 280], [460, 320], [500, 300], [500, 320], [500, 340], [520, 340], [540, 340], [520, 380], [500, 380], [480, 380], [480, 420], [500, 420], [520, 420], [480, 460], [520, 460], [540, 460], [520, 480], [480, 480], [480, 500], [120, 80], [80, 60], [40, 80], [280, 160], [340, 180], [380, 160], [420, 180], [500, 160], [540, 180], [580, 160]]
            if event.key == pygame.K_w:
                accepted = True
                for x in range(len(wall)):
                    if [cur[0], cur[1]] == wall[x]:
                        accepted = False
                        del wall[x]
                        print('wall deleted')
                        break
                if accepted:
                    wall.append([cur[0], cur[1]])
                    print('wall added')
            if event.key == pygame.K_e:
                endPoint = [cur[0], cur[1]]
            if event.key == pygame.K_r:
                explored = []
                notExplored = []
                notExplored.append([itemPos[0], itemPos[1], 0])
                path = []
                distanceToEnd = None
            if event.key == pygame.K_g:
                pass
            if event.key == pygame.K_s:
                startPoint = [cur[0], cur[1]]
                itemPos = [cur[0], cur[1]]
            if event.key == pygame.K_z:
                print(wall)
            if event.key == pygame.K_n:
                notExplored.append([cur[0], cur[1], 0])
                print("area to explore addded")
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_SPACE:
                doingAlg = False

    if click[0] == 1:
        accepted = True
        for x in range(len(wall)):
            if [cur[0], cur[1]] == wall[x]:
                accepted = False
                break
        if accepted:
            wall.append([cur[0], cur[1]])
    if click[2] == 1:
        for x in range(len(wall)):
            if [cur[0], cur[1]] == wall[x]:
                del wall[x]
                break

            

    if doingAlg:
        timer = time.time()
    #while doingAlg:

        if len(notExplored) == 0:
            print("404")
            print(time.time() - timer)
            doingAlg = False
        else:
            usingNotExploredItem = 0
            if distanceToEnd == None:
                for x in range(len(notExplored)-1, -1, -1):
                    if abs(notExplored[x][0] - endPoint[0]) + abs(notExplored[x][1] - endPoint[1]) < abs(notExplored[usingNotExploredItem][0] - endPoint[0]) + abs(notExplored[usingNotExploredItem][1] - endPoint[1]):
                        usingNotExploredItem = x
            else:
                for x in range(len(notExplored)-1, -1, -1):
                    if abs(notExplored[x][0] - startPoint[0]) + abs(notExplored[x][1] - startPoint[1]) < abs(notExplored[usingNotExploredItem][0] - startPoint[0]) + abs(notExplored[usingNotExploredItem][1] - startPoint[1]):
                    #if notExplored[x][2] < notExplored[usingNotExploredItem][2]:
                        usingNotExploredItem = x

                    
            x = usingNotExploredItem
                        
            if [notExplored[x][0], notExplored[x][1]] == endPoint:
                if distanceToEnd == None or notExplored[x][2] < distanceToEnd:
                    print(time.time() - timer)
                    doingAlg = False
                    distanceToEnd = notExplored[x][2]
                    testingPath = []
                    print("rastoqnie do kraq - ", notExplored[x][2])
                    usingItem = notExplored[x]
                    while True:
                        #print(usingItem[2], 'items left to track')
                        if usingItem[2] == 0:
                            path = testingPath
                            break
                        oldUsingItem = usingItem
                        for item in explored:
                            if item[2] == usingItem[2]-1:
                                if (item[0] - usingItem[0] == blockSize or item[0] - usingItem[0] == -blockSize or item[0] - usingItem[0] == 0) and (item[1] - usingItem[1] == blockSize or item[1] - usingItem[1] == -blockSize or item[1] - usingItem[1] == 0):
                                    testingPath.append(item)
                                    usingItem = item
                                    break
                        if oldUsingItem == usingItem:
                            print("spirane na tursene na na4aloto: po kratak put do kraq e nameren")
                            path = []
                            break
                                
            toDelNotExplored = list()
            
            for n in range(3): #3
                for m in range(3): #3
                    #if (m==n) or (m==0 and n == 2) or (n==0 and m ==2):
                    #    continue
                    testingItem = [notExplored[x][0]-blockSize+blockSize*n, notExplored[x][1]-blockSize+blockSize*m, notExplored[x][2]+1]
                    #notExplored.append([notExplored[x][0]-blockSize+blockSize*n, notExplored[x][1]-blockSize+blockSize*m, notExplored[x][2]+1])
                    acceptedItem = True


                    
                    for a in range(len(notExplored)-1, -1, -1):
                        if [notExplored[a][0], notExplored[a][1]] == [testingItem[0], testingItem[1]]:
                            if notExplored[a][2] > testingItem[2]:
                                toDelNotExplored.append(a)
                            else:
                                acceptedItem = False
                            break

                    if acceptedItem:
                        for a in range(len(wall)):
                            if [testingItem[0], testingItem[1]] == wall[a]:
                                acceptedItem = False
                                break

                        if acceptedItem:
                            for a in range(len(explored)-1, -1, -1):
                                if [testingItem[0], testingItem[1]] == [explored[a][0], explored[a][1]]:
                                    if testingItem[2] < explored[a][2]:
                                        del explored[a]
                                    else:
                                        acceptedItem = False
                                    break
                                
                            if acceptedItem:
                                notExplored.append(testingItem)
                                
                                
                                
            explored.append(notExplored[x])
            del notExplored[x]

            for item in toDelNotExplored:
                if item < x:
                    del notExplored[item]
                else:
                    del notExplored[item-1]



    gameDisplay.fill(black)

    for x in range(len(explored)):
        pygame.draw.rect(gameDisplay, white, (explored[x][0], explored[x][1], blockSize, blockSize))
        #text = font.render(str(explored[x][2]), 1, green)
        #gameDisplay.blit(text, (explored[x][0], explored[x][1]))

    for x in range(len(path)):
        pygame.draw.rect(gameDisplay, yellow, (path[x][0], path[x][1], blockSize, blockSize))
        text = font.render(str(path[x][2]), 1, green)
        gameDisplay.blit(text, (path[x][0], path[x][1]))

    for x in range(len(notExplored)):
        pygame.draw.rect(gameDisplay, blue, (notExplored[x][0], notExplored[x][1], blockSize, blockSize))

    for x in range(len(wall)):
        pygame.draw.rect(gameDisplay, lilavo, (wall[x][0], wall[x][1], blockSize, blockSize))

    pygame.draw.rect(gameDisplay, red, (endPoint[0], endPoint[1], blockSize ,blockSize))
    pygame.draw.rect(gameDisplay, green, (itemPos[0], itemPos[1], blockSize, blockSize))

    pygame.draw.rect(gameDisplay, lilavo, (cur[0], cur[1], blockSize, blockSize))

    pygame.display.update()
    #clock.tick(FPS)
